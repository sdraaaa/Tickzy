rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }
    
    // Helper function to check if user is approved host
    function isApprovedHost() {
      return isAuthenticated() && 
             getUserData().role == 'host' && 
             getUserData().hostStatus == 'approved';
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile during signup
      allow create: if isOwner(userId);
      
      // Users can update their own profile, admins can update any
      allow update: if isOwner(userId) || isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Events collection rules
    match /events/{eventId} {
      // Anyone can read events (public access for browsing)
      allow read: if true;
      
      // Only approved hosts can create events
      allow create: if isApprovedHost() && 
                       request.resource.data.createdBy == request.auth.uid;
      
      // Only event creator or admin can update events
      allow update: if isAuthenticated() && 
                       (resource.data.createdBy == request.auth.uid || isAdmin());
      
      // Only event creator or admin can delete events
      allow delete: if isAuthenticated() && 
                       (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Bookings collection rules (for future implementation)
    match /bookings/{bookingId} {
      // Users can read their own bookings, event creators can read bookings for their events, admins can read all
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.hostId == request.auth.uid || 
                      isAdmin());
      
      // Only authenticated users can create bookings for themselves
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Users can update their own bookings, hosts can update bookings for their events, admins can update all
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        resource.data.hostId == request.auth.uid || 
                        isAdmin());
      
      // Only booking owner, event host, or admin can delete bookings
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        resource.data.hostId == request.auth.uid || 
                        isAdmin());
    }
    
    // Host requests are handled through the users collection
    // No separate collection needed as host status is stored in user documents
    
    // Analytics collection (for future implementation)
    match /analytics/{document=**} {
      // Only admins can read/write analytics
      allow read, write: if isAdmin();
    }
    
    // System configuration (for future implementation)
    match /config/{document=**} {
      // Anyone can read public config
      allow read: if true;
      // Only admins can write config
      allow write: if isAdmin();
    }
  }
}
